swagger: '2.0'
info:
  contact:
    email: apiinfo@peregrine-cms.com
    name: Api Information Team
    url: 'https://api.peregrine-cms.com'
  description: 'peregrine cms api'
  license:
    name: Apache-2.0
  title: peregrine-cms-admin
  version: '1.0'
schemes:
  - http
basePath: /perapi/admin
consumes:
  - application/json
produces:
  - application/json
paths:
  /access.json:
    get:
      responses:
        200:
          description: returns the user id and if available the authentication type
          schema:
            type: object
            required:
              - userID
            properties:
              authType:
                type: string
              userID:
                type: string
  /componentDefinition.json:
    get:
      parameters:
        - description: the name of the component we want to get information about
          name: name
          type: string
          in: query
        - description: the path to a content node to look up the corresponding component. If
                       a path to a per:Page node is provided the explorer_dialog.json is used
                       for the model otherwise the dialog.json file of the component is used.
          name: path
          type: string
          in: query
      responses:
        200:
          description: get a component definition
          schema:
            type: object
            properties:
              path:
                type: string
                description: Path of the Commponent
              name:
                type: string
                description: Name of the Commponent
              model:
                type: string
                description: Content of the found dialog.json node
  '/content.json{path}':
    get:
      description: returns the content for the given path
      parameters:
        - description: the path to the content, for example /content/sites
          name: path
          type: string
          in: path
      responses:
        200:
          description: returns all the content for the given node
          schema:
            type: object
            additionalProperties:
              type: object
  '/getObject.json{path}':
    get:
      description: returns the content for the given object
      parameters:
        - description: the path to the content
          name: path
          type: string
          in: path
      responses:
        200:
          description: returns all the content for the given node
          schema:
            type: object
            additionalProperties:
              type: object
  '/createFolder.json{path}':
    post:
      description: create a new folder in the system
      parameters:
        - name: path
          type: string
          in: path
          description: the path where to create the new folder
          required: true
        - name: name
          type: string
          in: formData
          description: the name of the new folder
          required: true
      responses:
        200:
          description: returns all the content for the given node
          schema:
            type: object
            properties:
              type:
                type: string
                description: Type set to 'folder'
              status:
                type: string
                description: Status set to 'created'
              name:
                type: string
                description: Name of the created Object
              path:
                type: string
                description: Path of the newly created folder
        400:
          description: If the path did not resolve to a resource, the name is null or the folder already exists
          schema:
            $ref: "#/definitions/Error"
  '/createObject.json{path}':
    post:
      description: create a new object in the system
      parameters:
        - name: path
          type: string
          in: path
          description: the path where to create the object
          required: true
        - name: name
          type: string
          in: formData
          description: the name of the new object
          required: true
        - name: templatePath
          type: string
          in: formData
          description: the path to the template of the object
      responses:
        200:
          description: Object created as specified
          schema:
            type: object
            properties:
              type:
                type: string
                description: Type set to 'object'
              status:
                type: string
                description: Status set to 'created'
              name:
                type: string
                description: Name of the created Object
              path:
                type: string
                description: Path of the newly created object
              templatePath:
                type: string
                description: Template Path of the created object
        400:
          description: If the path did not resolve to a resource, the name is null or the object already exists
          schema:
            $ref: "#/definitions/Error"
  '/createPage.json{path}':
    post:
      description: create a new page in the system
      parameters:
        - name: path
          type: string
          in: path
          description: the path where to create the page
          required: true
        - name: name
          type: string
          in: formData
          description: the name of the new page
          required: true
        - name: templatePath
          type: string
          in: formData
          description: the path to the template of the page
          required: true
      responses:
        200:
          description: Page created as specified
          schema:
            type: object
            properties:
              type:
                type: string
                description: Type set to 'page'
              status:
                type: string
                description: Status set to 'created'
              name:
                type: string
                description: Name of the created Object
              path:
                type: string
                description: Path of the newly created page
              templatePath:
                type: string
                description: Template Path of the created page
        400:
          description: If the path or template path did not resolve to a resource, the name is null or the page already exists
          schema:
            $ref: "#/definitions/Error"
  '/createTemplate.json{path}':
    post:
      description: create a new template in the system
      parameters:
        - name: path
          type: string
          in: path
          description: the path where to create the template
        - name: name
          type: string
          in: formData
          description: the name of the new template
        - name: component
          type: string
          in: formData
          description: the path to the page component for this template
      responses:
        200:
          description: Template created as specified
          schema:
            type: object
            properties:
              type:
                type: string
                description: Type set to 'page'
              status:
                type: string
                description: Status set to 'created'
              name:
                type: string
                description: Name of the created Object
              path:
                type: string
                description: Path of the newly created template
        400:
          description: If the path did not resolve to a resource, the name is null or the template already exists
          schema:
            $ref: "#/definitions/Error"
  '/deleteNode.json{path}':
    post:
      description: delete a node
      parameters:
        - name: path
          type: string
          in: path
          description: the path to the node to delete
      responses:
        200:
          description: Given Node was deleted
          schema:
            type: object
            properties:
              type:
                type: string
                description: Type set to 'node'
              status:
                type: string
                description: Status set to 'deleted'
              name:
                type: string
                description: Name of the deleted Node
              parentPath:
                type: string
                description: Path of the parent in which the Node was deleted from
        400:
          description: If the path did not resolve to a resource or if the node could not be deleted
          schema:
            $ref: "#/definitions/Error"
  '/deletePage.json{path}':
    post:
      description: delete a page
      parameters:
        - name: path
          type: string
          in: path
          description: the path to the page to delete
      responses:
        200:
          description: Given Page was deleted
          schema:
            type: object
            properties:
              type:
                type: string
                description: Type set to 'page'
              status:
                type: string
                description: Status set to 'deleted'
              name:
                type: string
                description: Name of the deleted Node
              parentPath:
                type: string
                description: Path of the parent in which the Page was deleted from
        400:
          description: If the path did not resolve to a resource, if the reosurce is not a page or if the page could not be deleted
          schema:
            $ref: "#/definitions/Error"
  '/createSite.json':
    post:
      description: Creates a new Site by copying from an existing site
      parameters:
        - name: fromSite
          type: string
          in: formData
          description: The Name of the Source Site to copy from which must exist
          required: true
        - name: toSite
          type: string
          in: formData
          description: The Name of the Target Site to be copied to which must not exist
          required: true
      responses:
        200:
          description: returns the path of the new site and the path to the source
          schema:
            type: object
            properties:
              type:
                type: string
                description: Type set to 'site'
              status:
                type: string
                description: Status set to 'created'
              name:
                type: string
                description: Name of the newly crated site
              path:
                type: string
                description: Path of the newly created site
              sourcePath:
                type: string
                description: Path of the source site
        400:
          description: If the path did not resolve to a resource
          schema:
            $ref: "#/definitions/Error"
  '/updateSite.json':
    post:
      description: Updates a site's components and frontend libs from its source site
      parameters:
        - name: name
          type: string
          in: formData
          description: The Name of the site to update
          required: true
      responses:
        200:
          description: returns the path of the new site and the path to the source
          schema:
            type: object
            properties:
              type:
                type: string
                description: Type set to 'site'
              status:
                type: string
                description: Status set to 'updated'
              name:
                type: string
                description: Name of the updated site
        400:
          description: If the name was not a valid site name
          schema:
            $ref: "#/definitions/Error"
  '/deleteSite.json':
    post:
      description: Delete a Site
      parameters:
        - name: name
          type: string
          in: formData
          description: The Name of the Site to delete
          required: true
      responses:
        200:
          description: returns the path of the deleted site
          schema:
            type: object
            properties:
              type:
                type: string
                description: Type set to 'site'
              status:
                type: string
                description: Status set to 'deleted'
              sourcePath:
                type: string
                description: Path of the source site
        400:
          description: If the path did not resolve to a resource
          schema:
            $ref: "#/definitions/Error"
  '/insertNodeAt.json{path}':
    post:
      description: insert node at a path based on a component or content properties
      parameters:
        - name: path
          type: string
          in: path
          description: the path to the parent resource for into moves or the sibling for before or after
        - name: component
          type: string
          in: formData
          description: the path to the Node Component (resource type)
        - name: content
          type: object
          in: formData
          description: Node properties in JSon format. 'component' must provide the component node path and path is disregarded
        - name: drop
          type: string
          in: formData
          description: before, after, into, into-before, into-after
        - name: type
          type: string
          in: formData
          description: same as drop parameter and can be used instead of drop
        - name: variation
          type: string
          in: formData
          description: name of a component variation to be used if available
      responses:
        200:
          description: Returns the parent model
          schema:
            type: object
            additionalProperties:
              type: object
        400:
          description: If the path did not resolve to a resource or if the move / reorder failed
          schema:
            $ref: "#/definitions/Error"
  '/list.json/{type}':
    get:
      description: list the available tools
      parameters:
        - name: type
          type: string
          in: path
          description: either 'tools' or 'tools/config'
      responses:
        200:
          description: the available tools
          schema:
            type: object
            additionalProperties:
              type: object
        400:
          description: If the type was unrecognized or the JSon serialization failed
          schema:
            $ref: "#/definitions/Error"
  '/moveNodeTo.json{path}':
    post:
      description: list the available tools
      parameters:
        - name: path
          type: string
          in: path
          description: the path of the parent resource for into moves or the sibling for before or after
        - name: component
          type: string
          in: formData
          description: the path to the Node to be moved (source)
        - name: drop
          type: string
          in: formData
          description: before, after, into, into-before, into-after
        - name: type
          type: string
          in: formData
          description: same as drop parameter and can be used instead of drop
      responses:
        '200':
          description: returns the new node structure at the drop location
          schema:
            type: object
            additionalProperties:
              type: object
        400:
          description: If the path or component did not resolve to a resource or if the move / reorder failed
          schema:
            $ref: "#/definitions/Error"
  '/nodes.json{path}':
    get:
      parameters:
        - name: path
          type: string
          in: path
      responses:
        '200':
          description: returns the node tree
          schema:
            type: object
            additionalProperties:
              type: object
  '/templates.json':
    get:
      responses:
        '200':
          description: returns the templates
          schema:
            type: object
            additionalProperties:
              type: object
  '/objects.json':
    get:
      responses:
        '200':
          description: returns the templates
          schema:
            type: object
            additionalProperties:
              type: object
  '/components.json':
    get:
      responses:
        '200':
          description: returns the templates
          schema:
            type: object
            additionalProperties:
              type: object
  '/uploadFiles.json{path}':
    post:
      parameters:
        - name: path
          type: string
          in: path
          description: Path to the resource the assets are added to
      responses:
        200:
          description: Returns the parent node together with an array of asset uploaded
          schema:
            type: object
            properties:
              resourceName:
                type: string
                description: Name of the Parent Resource
              resourcePath:
                type: string
                description: Path of the Parent Resource
              assets:
                type: array
                items:
                  type: object
                  properties:
                    assetName:
                      type: string
                      description: Name of the created Asset Resource
                    assetPath:
                      type: string
                      description: Path of the created Asset Resource
        400:
          description: If the path or if the asset creation failed
          schema:
            $ref: "#/definitions/Error"
  '/listRepl.json':
    get:
      description: Lists all available and active Replication Services
      responses:
        200:
          description: returns the list of
          schema:
            type: object
            properties:
              replicationServices:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    description:
                      type: string
  '/repl.json{path}':
    post:
      description: Replicates the given node(s) using the named replication service
      parameters:
        - name: path
          type: string
          in: path
          description: the path of the node(s) to be replicated
          required: true
        - name: name
          type: string
          in: formData
          description: the name of the replication service to be used
          required: true
        - name: deep
          type: boolean
          in: formData
          description: flag indicating if only the given node and its content is replicated or all sub nodes
          required: false
        - name: deactivate
          type: boolean
          in: formData
          description: flag indicating if the target nodes are removed aka deactivated
          required: false
      responses:
        200:
          description: returns the root node name / path and the list of the nodes referenced
          schema:
            type: object
            properties:
              sourceName:
                type: string
              sourcePath:
                type: string
              replicates:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    path:
                      type: string
        400:
          description: If the path did not resolve to a resource
          schema:
            $ref: "#/definitions/Error"
  '/ref.json{path}':
    get:
      description: List references and their references of the given page
      parameters:
        - name: path
          type: string
          in: path
          description: the path of the resource to lists its references
          required: true
      responses:
        200:
          description: returns the root node name / path and the list of the nodes referenced
          schema:
            type: object
            properties:
              sourceName:
                type: string
              sourcePath:
                type: string
              references:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    path:
                      type: string
        400:
          description: If the path did not resolve to a resource
          schema:
            $ref: "#/definitions/Error"
  '/refBy.json{path}':
    get:
      description: Lists all the nodes that have a reference to the given node
      parameters:
        - name: path
          type: string
          in: path
          description: the path of the resource which is the targer of the reference
          required: true
      responses:
        200:
          description: returns the root node name / path and the list of the nodes that reference the given page which includes the node, the property node and the property name that contains the link
          schema:
            type: object
            properties:
              sourceName:
                type: string
              sourcePath:
                type: string
              referencedBy:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      description: Name of the Page having a reference
                      type: string
                    path:
                      description: Path to the Page having a reference
                      type: string
                    propertyName:
                      description: Name of the Property containing the reference
                      type: string
                    propertyPath:
                      description: Path of the Resource with the property containing the reference
                      type: string
        400:
          description: If the path did not resolve to a resource
          schema:
            $ref: "#/definitions/Error"
  '/move.json{path}':
    post:
      description: Move a given node to a new place
      parameters:
        - name: path
          type: string
          in: path
          description: the path of the resource which is moved
          required: true
        - name: to
          type: string
          in: formData
          description: the path of the resource that is either the new parent for type 'child' or the next/previous sibling for type 'before' or 'after'
          required: true
        - name: type
          type: string
          in: formData
          description: The type of move which can be 'child' (add as child of the given to node), 'after' (add after the given to node) or 'before' (add before the given to node)
          required: true
      responses:
        200:
          description: returns the from node name and path and the new node name and path
          schema:
            $ref: "#/definitions/Move"
        400:
          description: If the path and to did not resolve to a resource or if the type was wrong
          schema:
            $ref: "#/definitions/Error"
  '/rename.json{path}':
    post:
      description: Renames a Resource and tries to keep the order intact
      parameters:
        - name: path
          type: string
          in: path
          description: the path of the resource which is renamed
          required: true
        - name: to
          type: string
          in: path
          description: the new name of the resource
          required: true
      responses:
        200:
          description: returns the from node name and path and the new node name and path
          schema:
            $ref: "#/definitions/Move"
        400:
          description: If the path did not resolve to a resource, the to name was not provided or contained a slash
          schema:
            $ref: "#/definitions/Error"
definitions:
  Error:
    type: object
    properties:
      code:
        type: int32
      message:
        type: string
      path:
        type: string
      exception:
        type: string
      additionalProperties:
        type: string
  Move:
    type: object
    properties:
      sourceName:
        type: string
      sourcePath:
        type: string
      tagetName:
        type: string
      targetPath:
        type: string
